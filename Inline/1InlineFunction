-----it is common for a compiler not to inline a recursive function-------
----- Macros cannot access private members of class. Macros looks like function call but they are actually not ,this is difference between macros and inline.--------

#include <iostream>
inline int max(int a, int b)
{
return a>b ? a : b;
}
int main()
{
cout << max(10, 20);
cout << " " << max(99, 88);
return 0;
}


As far as the compiler is concerned, the above program is equivalent to this one:
#include <iostream>
using namespace std;
int main()
{
cout << (10>20 ? 10 : 20);
cout << " " << (99>88 ? 99 : 88);
return
}


-----NOTE----------------------------
The reason that inline functions are an important addition to C++ is that they allow you to create very efficient code. Since classes typically require several frequently
executed interface functions (which provide access to private data), the efficiency of these functions is of critical concern. As you probably know, each time a function is
called, a significant amount of overhead is generated by the calling and return mechanism. Typically, arguments are pushed onto the stack and various registers are
saved when a function is called, and then restored when the function returns. 
The trouble is that these instructions take time. However, when a function is expanded in
line, none of those operations occur.
